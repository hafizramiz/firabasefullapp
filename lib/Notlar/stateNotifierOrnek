import 'dart:ffi';

import 'package:firebasefullapp/counter_model.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

/// Burasi Bussines Logic olan SInifdir.


// StateNotifierProvider olusturdum. SImdi final ile provider olusturcam daha once yaptiim gibi
// Burda iki tane degisken alcak.
//            Birincisi StateNotifierdan extend ettigimiz sinifin turu  => StateNotifierOrnek
//            Ikincisi arayuze aktarilacak state sinifi, bu bir liste de olabilirdi vs. => Counter

final counterStateNotifierProvider=StateNotifierProvider<StateNotifierOrnek,Counter>((ref) {
  // asagida bahs ettigim burda iste sinifi burda cagirdim. Eger sinifim bir parametre istiyor olsaydi
  // yani superine bir baslangic degeri vermemis olsaydim.StateNotifierOrnek() constructoruna bir nesne vermek
  // zorundaydim. O da alip ust sinifin constructoruna atackti bunu.
  return StateNotifierOrnek();
} );



class StateNotifierOrnek extends StateNotifier<Counter>{
  // Okumadan once soyliyim: Burda arayuzden ornek verdim ama arayuzden degil de fnal bir variable olusturuldugunda
  // da yukardaki gibi yine de constructor cagrildiginda ayni durum geerli
  /// SImdi ben arayuzden bu sinifa erisip bunu kullancam. Onun icinden  StateNotifierOrnek sinifindan bir nesne
  /// olusturcam ve onun metotlarina filan eriscem. Simdi ondan bir nesne olusturmak istedigim zaman
  /// bende bir deger isteyecek.Counter tipinde bir nesne isteyecek. O iste benim state'min baslangic degeri oluyor.
  /// Onu arayuzde de verebilirim. Burda da. Burda vermek istersem. Burda iken buna bir parametre gecmem gerekiyor,
  /// StateNotifierOrnek(super.state) bu haliyle ne yapiyor. Sen arayuzden bu sinifi cagirdiginda verecegin Counter nesnesini
  /// aliyor. aldigini da ust siniftaki constructora gonderiyor.(super.state) ile yapiyor bunu.
  // Eger ben arayuzden degil burdan state degerimi belirlemek istiyorsam o zaman burda iken buna bir Counter
  // nesnesi vermem gerek. Nereye vermem gerek. Bu sinifin ust sinifi olan consturctora. Cunku o istiyor benden bunu
  // StateNotifierOrnek sinifi istemiyor. O da bizden alip ona gonderecek zaten. Onu katmadan direk super constructora bunu
  // verebilirim.
  ///StateNotifierOrnek(super.state);
  StateNotifierOrnek(): super(Counter(0));
  /// Boyle yaparak ne yaptim.  StateNotifierOrnek bu sinifi aradan cikardim. Artik UI tarafinda ben StateNotifierOrnek
  /// sinifindan bir nesne urettigim zaman benden bir Cunter nesnesi istemeyecek.
  /// Super Constructora verdigim Counter(0) nesnesi benim state'min baslangic noktasidir artik.
  // State Notifier sinifina bakarsam bunu bariz gorebilirim. Yani bu abstract sinifin constructoru bir nesne bekliyor.
  /// abstract class StateNotifier<T> {
  //   /// Initialize [state].
  //   StateNotifier(this._state);

  // Artik State hazir Artirma ve Azaltma yapcam.
   void increment(){
    /// Bu Spread operatordur. Value Notifier da da bunu kullaniriz.
    /// Burda yeni liste olusturacak. Daha sonra yeni geleni ekleyip ekrana notification gonderecek.
     /// state= generic olarak verdigim model ya liste ve benzeri. Benim ornegimde Counter modelidr
     /// Su an burda spread operator kullanmadim. Listede onu yapabilirdim.
     state=Counter(state.counter+=1);
  }

  void decrement(){
     state=Counter(state.counter-=1);
  }
}

MAIN DOSYASI
import 'package:firebasefullapp/stateNotifierOrnek.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import 'counter_model.dart';
// Provider'e tek bir defa dinlemek sonra dinlemek istemezsem o zamanda ref.re

final myVar = Provider<String>((ref) => "Deneme String");
final myVar1 = Provider<String>((ref) {
  return " Ikinci String";
});

final stateProviderVar = StateProvider((ref) {
  // ref deyince aklimiza gelmesi gereken: Baska providerlara erismek icin gerekli olan aractir.
  // burda baska provideri okuyabilirim.
  // Onceki soyledigimizi tasdikler niteliktedir. Yani bir veriyi elde ederken baska bir
  // state'de erisip onu da kullanmamiz gerekebilir. Bu durumda ref bize fayda saglar.
// Burda farkli bir provider'dan okudum ve istedigim degisiklikleri yapip ekrana verebilirim.
  var title = ref.watch(myVar);
  return title + "diyelim ki ilgili state'e bunu da eklemek istedim.";
});

final stateProviderVar2 = StateProvider<int>((ref) => 0);

void main() {
  runApp(const ProviderScope(child: MyApp()));
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      home: MyHomePage(),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  @override
  Widget build(BuildContext context) {
    print("Build calisti: my home page");
    return Scaffold(
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Consumer(
            builder: (BuildContext context, ref, child) {
              final String stringDeger = ref.watch(myVar);
              return Text("${stringDeger}");
            },
          ),
          MyTextWidget(),
          MyCounter()
        ],
      ),
    );
  }
}

class MyCounter extends ConsumerWidget {
  const MyCounter({
    super.key,
  });

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    print("Build calisti: my Counter");

    Counter sayac = ref.watch(counterStateNotifierProvider);
    return Column(mainAxisAlignment: MainAxisAlignment.center, children: [
      Text("Counter degeri: ${sayac.counter}"),
      ElevatedButton(
          onPressed: () {
            print("Butona tiklandi");
            // Butona tiklandiginda state'i yani counter degiskenini degistirmek istiyorum.
            // Bunu nasil yapcam? ref.read ile yapcam. Burdaki yaptigim gibi yapiyorum.
            // ref.read(stateProviderVar2.notifier).state+=2;
            // Burda bu sekilde  ref.read(counterStateNotifierProvider.notifier) olmasi gerekiyor ki metotlara erisebilelim

            ref.read(counterStateNotifierProvider.notifier).increment();
          },
          child: Text("Counter artir"))
    ]);
  }
}

/// Bask bir provider'i ConsumerWidget 'tan extend ettim. Bunun build metotu WidgetRef diye bir paramerte istiyor.
class MyTextWidget extends ConsumerWidget {
  const MyTextWidget({
    super.key,
  });

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Text("${ref.watch(myVar1)}");
  }
}
